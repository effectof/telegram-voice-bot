import os
import sqlite3
import datetime
import aiohttp
import asyncio

import openai
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor

# --- –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
YOOKASSA_LINK = os.getenv("YOOKASSA_LINK")  # —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –ø—Ä–µ–º–∏—É–º –≤ YooKassa

if not TELEGRAM_TOKEN or not OPENAI_API_KEY:
    print("ERROR: TELEGRAM_TOKEN –∏–ª–∏ OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω—ã!")
    exit(1)

openai.api_key = OPENAI_API_KEY

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)

# --- –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ---
conn = sqlite3.connect('users.db')
cursor = conn.cursor()
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    language TEXT,
    requests_count INTEGER DEFAULT 0,
    last_request_date TEXT,
    registration_date TEXT,
    subscription_status TEXT DEFAULT 'free',
    subscription_expire TEXT
)
''')
conn.commit()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
lang_kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
lang_kb.add(KeyboardButton("–†—É—Å—Å–∫–∏–π üá∑üá∫"), KeyboardButton("English üá∫üá∏"))

main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add(KeyboardButton("üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"), KeyboardButton("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"))
main_kb.add(KeyboardButton("‚≠ê –ö—É–ø–∏—Ç—å –ü—Ä–µ–º–∏—É–º"))

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def get_user(user_id):
    cursor.execute('SELECT language, requests_count, last_request_date, registration_date, subscription_status, subscription_expire FROM users WHERE user_id = ?', (user_id,))
    row = cursor.fetchone()
    if row:
        return {
            'language': row[0],
            'requests_count': row[1],
            'last_request_date': row[2],
            'registration_date': row[3],
            'subscription_status': row[4],
            'subscription_expire': row[5],
        }
    else:
        return None

def add_user(user_id, language):
    now = datetime.datetime.utcnow().date().isoformat()
    cursor.execute('INSERT OR IGNORE INTO users (user_id, language, registration_date) VALUES (?, ?, ?)', (user_id, language, now))
    conn.commit()

def update_user_language(user_id, language):
    cursor.execute('UPDATE users SET language = ? WHERE user_id = ?', (language, user_id))
    conn.commit()

def reset_daily_requests_if_needed(user):
    today = datetime.datetime.utcnow().date().isoformat()
    if user['last_request_date'] != today:
        cursor.execute('UPDATE users SET requests_count = 0, last_request_date = ? WHERE user_id = ?', (today, user_id))
        conn.commit()
        user['requests_count'] = 0
        user['last_request_date'] = today

def increment_request_count(user_id):
    cursor.execute('UPDATE users SET requests_count = requests_count + 1, last_request_date = ? WHERE user_id = ?',
                   (datetime.datetime.utcnow().date().isoformat(), user_id))
    conn.commit()

def update_subscription(user_id, status, expire_date):
    cursor.execute('UPDATE users SET subscription_status = ?, subscription_expire = ? WHERE user_id = ?', (status, expire_date, user_id))
    conn.commit()

def check_subscription_expiry():
    today = datetime.datetime.utcnow().date()
    cursor.execute('SELECT user_id, subscription_expire FROM users WHERE subscription_status = "premium"')
    users = cursor.fetchall()
    for user_id, expire_str in users:
        if expire_str:
            expire_date = datetime.datetime.fromisoformat(expire_str).date()
            if expire_date < today:
                update_subscription(user_id, 'free', None)

async def send_typing_action(chat_id):
    await bot.send_chat_action(chat_id, action="typing")

# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user = get_user(message.from_user.id)
    if user is None:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose your language:", reply_markup=lang_kb)
    else:
        await message.answer(get_welcome_message(user['language']), reply_markup=main_kb)

@dp.message_handler(lambda m: m.text in ["–†—É—Å—Å–∫–∏–π üá∑üá∫", "English üá∫üá∏"])
async def set_language(message: types.Message):
    lang = 'rus' if message.text == "–†—É—Å—Å–∫–∏–π üá∑üá∫" else 'eng'
    user = get_user(message.from_user.id)
    if user is None:
        add_user(message.from_user.id, lang)
    else:
        update_user_language(message.from_user.id, lang)
    await message.answer(get_welcome_message(lang), reply_markup=main_kb)

def get_welcome_message(lang):
    if lang == 'rus':
        return (
            "–ü—Ä–∏–≤–µ—Ç! üëã\n"
            "–Ø ‚Äî —Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π –∏ —É–º–Ω—ã–π —á–∞—Ç-–±–æ—Ç –≤ Telegram —Å GPT-5! üöÄ\n\n"
            "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å —É —Ç–µ–±—è –µ—Å—Ç—å 5 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–π —á—Ç–æ —É–≥–æ–¥–Ω–æ!\n"
            "–•–æ—Ç–∏—Ç–µ –±–æ–ª—å—à–µ? –û—Ñ–æ—Ä–º–∏ –ü—Ä–µ–º–∏—É–º –∑–∞ 250‚ÇΩ –≤ –º–µ—Å—è—Ü –∏ –ø–æ–ª—É—á–∞–π:\n"
            "üéôÔ∏è –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞\n"
            "‚ôæÔ∏è –ë–µ–∑–≥—Ä–∞–Ω–∏—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ ‚Äî –≥–æ–≤–æ—Ä–∏ —Å–æ –º–Ω–æ–π —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ!\n\n"
            "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å! üí¨"
        )
    else:
        return (
            "Hey! üëã\n"
            "I‚Äôm the fastest and smartest chatbot on Telegram powered by GPT-5! üöÄ\n\n"
            "You get 5 free requests per day ‚Äî ask me anything!\n"
            "Want more? Get the Premium plan for $5/month and enjoy:\n"
            "üéôÔ∏è Voice messages for hands-free chatting\n"
            "‚ôæÔ∏è Unlimited requests ‚Äî talk to me as much as you want!\n\n"
            "Ready to start? Just send your question! üí¨"
        )

@dp.message_handler(lambda m: m.text == "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def personal_cabinet(message: types.Message):
    user = get_user(message.from_user.id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ —á–µ—Ä–µ–∑ /start")
        return
    now = datetime.datetime.utcnow().date()
    sub_expire = user['subscription_expire']
    expire_str = sub_expire if sub_expire else "-"
    if user['subscription_status'] == 'premium':
        text = (
            "üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n"
            f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user['registration_date']}\n"
            "üíé –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–µ–Ω\n"
            f"‚è≥ –ò—Å—Ç–µ–∫–∞–µ—Ç: {expire_str}"
        )
    else:
        left = max(0, 5 - user['requests_count'])
        text = (
            "üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n"
            f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user['registration_date']}\n"
            "üíé –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\n"
            f"üìù –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {left} –∏–∑ 5"
        )
    await message.answer(text)

@dp.message_handler(lambda m: m.text == "‚≠ê –ö—É–ø–∏—Ç—å –ü—Ä–µ–º–∏—É–º")
async def buy_premium(message: types.Message):
    if not YOOKASSA_LINK:
        await message.answer("–û–ø–ª–∞—Ç–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å 250‚ÇΩ / month", url=YOOKASSA_LINK))
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É:", reply_markup=keyboard)

@dp.message_handler(content_types=types.ContentType.TEXT)
async def handle_text(message: types.Message):
    user = get_user(message.from_user.id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ —á–µ—Ä–µ–∑ /start")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å
    check_subscription_expiry()
    user = get_user(message.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
    today = datetime.datetime.utcnow().date().isoformat()
    if user['last_request_date'] != today:
        cursor.execute('UPDATE users SET requests_count=0, last_request_date=? WHERE user_id=?', (today, message.from_user.id))
        conn.commit()
        user['requests_count'] = 0

    if user['subscription_status'] != 'premium' and user['requests_count'] >= 5:
        if user['language'] == 'rus':
            await message.answer("–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —Å—É—Ç–æ—á–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏. –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –¥–∞–ª—å—à–µ, –∫—É–ø–∏—Ç–µ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ 250‚ÇΩ –≤ –º–µ—Å—è—Ü.")
        else:
            await message.answer("You have reached the daily limit of free requests. To continue, please purchase the Premium subscription for $5/month.")
        return

    msg = await message.answer("Chat GPT 5 –¥—É–º–∞–µ—Ç..." if user['language']=='rus' else "Chat GPT 5 is thinking...")

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": message.text}],
            temperature=0.7
        )
        answer = response.choices[0].message["content"]
        increment_request_count(message.from_user.id)
        await msg.delete()
        await message.answer(answer)
    except Exception as e:
        await msg.delete()
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")

@dp.message_handler(content_types=types.ContentType.VOICE)
async def handle_voice(message: types.Message):
    user = get_user(message.from_user.id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ —á–µ—Ä–µ–∑ /start")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å
    check_subscription_expiry()
    user = get_user(message.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
    today = datetime.datetime.utcnow().date().isoformat()
    if user['last_request_date'] != today:
        cursor.execute('UPDATE users SET requests_count=0, last_request_date=? WHERE user_id=?', (today, message.from_user.id))
        conn.commit()
        user['requests_count'] = 0

    if user['subscription_status'] != 'premium' and user['requests_count'] >= 5:
        if user['language'] == 'rus':
            await message.answer("–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —Å—É—Ç–æ—á–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏. –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –¥–∞–ª—å—à–µ, –∫—É–ø–∏—Ç–µ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ 250‚ÇΩ –≤ –º–µ—Å—è—Ü.")
        else:
            await message.answer("You have reached the daily limit of free requests. To continue, please purchase the Premium subscription for $5/month.")
        return

    msg = await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..." if user['language']=='rus' else "Processing voice message...")

    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        file = await bot.get_file(message.voice.file_id)
        file_url = f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{file.file_path}"

        async with aiohttp.ClientSession() as session:
            async with session.get(file_url) as resp:
                voice_bytes = await resp.read()

        temp_path = f"voice_{message.message_id}.ogg"
        with open(temp_path, "wb") as f:
            f.write(voice_bytes)

        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —á–µ—Ä–µ–∑ openai Whisper (v0.28.0)
        with open(temp_path, "rb") as audio_file:
            transcript = openai.Audio.transcribe("whisper-1", audio_file)
        recognized_text = transcript["text"]

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ GPT
        response = openai.ChatCompletion.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": recognized_text}],
            temperature=0.7
        )
        answer = response.choices[0].message["content"]

        increment_request_count(message.from_user.id)

        await msg.delete()
        await message.answer(f"üó£ –í—ã —Å–∫–∞–∑–∞–ª–∏: {recognized_text}\n\nüí¨ –û—Ç–≤–µ—Ç: {answer}")

        os.remove(temp_path)

    except Exception as e:
        await msg.delete()
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ: {e}")

if __name__ == "__main__":
    print("Bot started...")
    executor.start_polling(dp, skip_updates=True)
